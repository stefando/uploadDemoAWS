# Core AWS configuration
export AWS_PROFILE=personal
export AWS_REGION=eu-central-1
export STACK_NAME=upload-demo-stack

# Common test password
export TEST_PASSWORD="TestPass123!"

# Function to load CloudFormation outputs
load_stack_outputs() {
    echo "Loading CloudFormation outputs for stack: $STACK_NAME"
    
    # Check if stack exists
    if aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $AWS_PROFILE --region $AWS_REGION >/dev/null 2>&1; then
        export USER_POOL_A=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $AWS_PROFILE --region $AWS_REGION --query "Stacks[0].Outputs[?OutputKey=='UserPoolIdTenantA'].OutputValue" --output text)
        export USER_POOL_B=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $AWS_PROFILE --region $AWS_REGION --query "Stacks[0].Outputs[?OutputKey=='UserPoolIdTenantB'].OutputValue" --output text)
        export CLIENT_ID_A=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $AWS_PROFILE --region $AWS_REGION --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientIdTenantA'].OutputValue" --output text)
        export CLIENT_ID_B=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $AWS_PROFILE --region $AWS_REGION --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientIdTenantB'].OutputValue" --output text)
        export S3_BUCKET=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $AWS_PROFILE --region $AWS_REGION --query "Stacks[0].Outputs[?OutputKey=='SharedStorageBucket'].OutputValue" --output text)
        export API_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $AWS_PROFILE --region $AWS_REGION --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
        
        # API Gateway direct endpoint
        export API_ID=$(aws apigateway get-rest-apis --profile $AWS_PROFILE --region $AWS_REGION --query "items[?name=='${STACK_NAME}-api'].id" --output text)
        export API_ENDPOINT="https://${API_ID}.execute-api.${AWS_REGION}.amazonaws.com/prod"
        
        echo "‚úÖ CloudFormation outputs loaded successfully"
    else
        echo "‚ö†Ô∏è  Stack '$STACK_NAME' not found. Deploy the stack first with 'task deploy'"
    fi
}

# Load outputs if stack exists
load_stack_outputs

# Add convenience functions
check_users() {
    echo "=== Tenant A Users ==="
    aws cognito-idp list-users --user-pool-id $USER_POOL_A --profile $AWS_PROFILE --region $AWS_REGION --query 'Users[].Username' --output json 2>/dev/null || echo "No User Pool A found"
    
    echo -e "\n=== Tenant B Users ==="
    aws cognito-idp list-users --user-pool-id $USER_POOL_B --profile $AWS_PROFILE --region $AWS_REGION --query 'Users[].Username' --output json 2>/dev/null || echo "No User Pool B found"
}

get_token() {
    local tenant=$1
    local username=$2
    
    if [[ -z "$tenant" || -z "$username" ]]; then
        echo "Usage: get_token <tenant> <username>"
        echo "Example: get_token tenant-a john"
        return 1
    fi
    
    curl -s -X POST https://upload-api.stefando.me/login \
        -H "Content-Type: application/json" \
        -d "{\"tenant\": \"$tenant\", \"username\": \"$username\", \"password\": \"$TEST_PASSWORD\"}" \
        | jq -r '.access_token'
}

# Print helpful information
echo "üöÄ AWS Upload Demo Environment Loaded"
echo "   Profile: $AWS_PROFILE"
echo "   Region: $AWS_REGION"
echo "   Stack: $STACK_NAME"
echo ""
echo "üìù Available commands:"
echo "   task deploy       - Deploy the stack"
echo "   task delete       - Delete the stack"
echo "   check_users       - List users in both tenants"
echo "   get_token <tenant> <username> - Get access token"
echo ""
echo "üîß Run 'load_stack_outputs' to refresh CloudFormation outputs"