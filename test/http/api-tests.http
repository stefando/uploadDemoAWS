### JetBrains HTTP Client test file for Upload Demo API
### Usage: Open this file in JetBrains IDE and click the green arrow to run requests

### Variables (update these after deployment)
@baseUrl = https://upload-api.stefando.me
# Alternative: Use direct API Gateway URL
# @baseUrl = https://YOUR_API_ID.execute-api.eu-central-1.amazonaws.com/prod

# ============================================
# MULTI-TENANT LOGIN TESTS
# ============================================

### Login as tom from tenant-a
# @name loginTenantATom
POST {{baseUrl}}/login
Content-Type: application/json

{
  "tenant": "{{tenantA}}",
  "username": "{{userA1}}",
  "password": "{{password}}"
}

> {%
    client.test("Login successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.access_token, "No access token in response");
    });
    client.global.set("accessTokenATom", response.body.access_token);
    client.global.set("idTokenATom", response.body.id_token);
%}

###

### Login as jerry from tenant-a
# @name loginTenantAJerry
POST {{baseUrl}}/login
Content-Type: application/json

{
  "tenant": "{{tenantA}}",
  "username": "{{userA2}}",
  "password": "{{password}}"
}

> {%
    client.test("Login successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.access_token, "No access token in response");
    });
    client.global.set("accessTokenAJerry", response.body.access_token);
    client.global.set("idTokenAJerry", response.body.id_token);
%}

###

### Login as sylvester from tenant-b
# @name loginTenantBSylvester
POST {{baseUrl}}/login
Content-Type: application/json

{
  "tenant": "{{tenantB}}",
  "username": "{{userB1}}",
  "password": "{{password}}"
}

> {%
    client.test("Login successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.access_token, "No access token in response");
    });
    client.global.set("accessTokenBSylvester", response.body.access_token);
    client.global.set("idTokenBSylvester", response.body.id_token);
%}

###

### Login as tweety from tenant-b
# @name loginTenantBTweety
POST {{baseUrl}}/login
Content-Type: application/json

{
  "tenant": "{{tenantB}}",
  "username": "{{userB2}}",
  "password": "{{password}}"
}

> {%
    client.test("Login successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.access_token, "No access token in response");
    });
    client.global.set("accessTokenBTweety", response.body.access_token);
    client.global.set("idTokenBTweety", response.body.id_token);
%}

###

### Test invalid tenant (should fail)
POST {{baseUrl}}/login
Content-Type: application/json

{
  "tenant": "invalid-tenant",
  "username": "john",
  "password": "TestPass123!"
}

> {%
    client.test("Login should fail for invalid tenant", function() {
        client.assert(response.status === 401, "Expected 401 for invalid tenant");
    });
%}

###

### Test missing tenant parameter (should fail)
POST {{baseUrl}}/login
Content-Type: application/json

{
  "username": "john",
  "password": "TestPass123!"
}

> {%
    client.test("Login should fail without tenant", function() {
        client.assert(response.status === 400 || response.status === 401, "Expected 400 or 401 without tenant");
    });
%}

# ============================================
# UPLOAD TESTS - TENANT ISOLATION
# ============================================

### Upload file as tom from tenant-a
POST {{baseUrl}}/upload
Authorization: Bearer {{accessTokenATom}}
Content-Type: application/json

{
  "data": "Test data from Tom (tenant A)",
  "timestamp": "{{$timestamp}}"
}

> {%
    client.test("Upload successful", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.file_path.startsWith("tenant-a/"), "File not stored in tenant-a prefix");
    });
%}

###

### Upload file as jerry from tenant-a
POST {{baseUrl}}/upload
Authorization: Bearer {{accessTokenAJerry}}
Content-Type: application/json

{
  "data": "Test data from Jerry (tenant A)",
  "timestamp": "{{$timestamp}}"
}

> {%
    client.test("Upload successful", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.file_path.startsWith("tenant-a/"), "File not stored in tenant-a prefix");
    });
%}

###

### Upload file as sylvester from tenant-b
POST {{baseUrl}}/upload
Authorization: Bearer {{accessTokenBSylvester}}
Content-Type: application/json

{
  "data": "Test data from Sylvester (tenant B)",
  "timestamp": "{{$timestamp}}"
}

> {%
    client.test("Upload successful", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.file_path.startsWith("tenant-b/"), "File not stored in tenant-b prefix");
    });
%}

###

### Upload file as tweety from tenant-b
POST {{baseUrl}}/upload
Authorization: Bearer {{accessTokenBTweety}}
Content-Type: application/json

{
  "data": "Test data from Tweety (tenant B)",
  "timestamp": "{{$timestamp}}"
}

> {%
    client.test("Upload successful", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.file_path.startsWith("tenant-b/"), "File not stored in tenant-b prefix");
    });
%}

# ============================================
# MULTIPART UPLOAD TESTS
# ============================================

### Initiate multipart upload as tom from tenant-a
POST {{baseUrl}}/upload/initiate
Authorization: Bearer {{accessTokenATom}}
Content-Type: application/json

{
  "containerKey": "large-files",
  "objectKey": "big-data-{{$timestamp}}.json",
  "fileSize": 104857600,
  "partSize": 5242880
}

> {%
    client.test("Initiate upload successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.uploadId, "No uploadId in response");
        client.assert(response.body.presignedUrls, "No presignedUrls in response");
    });
    client.global.set("uploadIdA", response.body.uploadId);
    client.global.set("objectKeyA", response.body.objectKey);
%}

###

### Complete multipart upload
POST {{baseUrl}}/upload/complete
Authorization: Bearer {{accessTokenATom}}
Content-Type: application/json

{
  "uploadId": "{{uploadIdA}}",
  "objectKey": "{{objectKeyA}}",
  "parts": [
    {
      "partNumber": 1,
      "etag": "example-etag-1"
    },
    {
      "partNumber": 2,
      "etag": "example-etag-2"
    }
  ]
}

###

### Abort multipart upload
POST {{baseUrl}}/upload/abort
Authorization: Bearer {{accessTokenATom}}
Content-Type: application/json

{
  "uploadId": "{{uploadIdA}}",
  "objectKey": "{{objectKeyA}}"
}

###

### Refresh presigned URLs
POST {{baseUrl}}/upload/refresh
Authorization: Bearer {{accessTokenATom}}
Content-Type: application/json

{
  "uploadId": "{{uploadIdA}}",
  "objectKey": "{{objectKeyA}}",
  "partNumbers": [1, 2, 3]
}

# ============================================
# GENERAL API TESTS
# ============================================

### Health check (no auth required)
GET {{baseUrl}}/health

> {%
    client.test("Health check successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###

### Test unauthorized access (should fail)
POST {{baseUrl}}/upload
Content-Type: application/json

{
  "test": "Should fail without auth"
}

> {%
    client.test("Unauthorized access should fail", function() {
        client.assert(response.status === 401 || response.status === 403, "Expected 401 or 403 without auth");
    });
%}

###

### Test cross-tenant access (sylvester trying to use tweety's token - should succeed but still tenant-b)
POST {{baseUrl}}/upload
Authorization: Bearer {{accessTokenBTweety}}
Content-Type: application/json

{
  "data": "Sylvester using Tweety's token (both tenant B)",
  "timestamp": "{{$timestamp}}"
}

> {%
    client.test("Same tenant access should work", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.file_path.startsWith("tenant-b/"), "File not stored in tenant-b prefix");
    });
%}

###