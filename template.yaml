AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Multi-tenant file upload service with Cognito authentication and S3 storage

# Global configuration for all resources
Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    # Using the provided.al2023 Lambda runtime for execution
    Runtime: provided.al2023
    Architectures:
      - arm64

Parameters:
  DomainName:
    Type: String
    Default: stefando.me
    Description: The domain name for the API (Route53 hosted zone must exist)
  
  ApiSubdomain:
    Type: String
    Default: upload-api
    Description: Subdomain for the API endpoint
    
  HostedZoneId:
    Type: String
    Description: ID of the Route53 hosted zone for the domain
    Default: ''

Resources:
  # ================================================
  # COGNITO USER POOL - Authentication Service
  # ================================================
  # User Pool manages user accounts and authentication
  # Think of it as your user database + authentication logic
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: upload-demo-user-pool
      # Password policy for security
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      # Auto-verify email addresses (for production, you'd want email verification)
      AutoVerifiedAttributes:
        - email
      # Schema defines what user attributes we collect
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: tenant_id
          AttributeDataType: String
          Required: false
          Mutable: true
      # Lambda triggers for adding custom claims to JWT (V2_0 enables access token customization)
      LambdaConfig:
        PreTokenGenerationConfig:
          LambdaArn: !GetAtt PreTokenGenerationLambda.Arn
          LambdaVersion: "V2_0"

  # User Pool Client - handles JWT token generation
  # This is what your frontend application uses to authenticate users
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: upload-demo-client
      # Explicit auth flows - these determine how clients can authenticate
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH  # Allow admin-initiated auth (for testing)
        - USER_PASSWORD_AUTH # Allow username/password auth
      # Token validity periods
      AccessTokenValidity: 1  # 1 hour
      IdTokenValidity: 1      # 1 hour
      RefreshTokenValidity: 30 # 30 days
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days

  # ================================================
  # LAMBDA FOR CUSTOM JWT CLAIMS
  # ================================================
  # This Lambda adds the tenant_id claim to JWT tokens
  # It's triggered before Cognito generates tokens
  PreTokenGenerationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upload-demo-pre-token-generation
      CodeUri: .aws-sam/build/PreTokenGenerationLambda/function.zip
      Handler: bootstrap
      Runtime: provided.al2023
      Environment:
        Variables:
          # Environment variables for the Lambda
          LOG_LEVEL: INFO
      # Lambda is associated with Cognito via LambdaConfig, not through Events
      # SAM doesn't support Cognito triggers via the Events property

  # Permission for Cognito to invoke the pre-token Lambda
  PreTokenGenerationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PreTokenGenerationLambda
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  # Permission for API Gateway to invoke the tenant authorizer Lambda
  TenantAuthorizerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TenantAuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/authorizers/*"

  # ================================================
  # S3 BUCKET - Shared Storage with Tenant Prefixes
  # ================================================
  # Single bucket with tenant-prefixed paths for multi-tenant isolation
  SharedStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-store-shared"
      # Block public access for security
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # Tagging for identification
      Tags:
        - Key: Purpose
          Value: MultiTenantFileStorage

  # ================================================
  # TENANT ACCESS ROLE - For S3 operations with session tags
  # ================================================
  # This role is assumed by Lambda with tenant-specific session tags
  TenantAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-tenant-access-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              # Using explicit ARN with role name to avoid circular dependency
              # (can't use !GetAtt LambdaExecutionRole.Arn here)
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-lambda-execution-role"
            Action: 
              - sts:AssumeRole
              - sts:TagSession
      Policies:
        - PolicyName: TenantS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow S3 operations only on paths matching the session tag
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "${SharedStorageBucket.Arn}/${!aws:PrincipalTag/tenant_id}/*"
              # Allow listing bucket contents for tenant prefix only
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt SharedStorageBucket.Arn
                Condition:
                  StringLike:
                    s3:prefix: "${aws:PrincipalTag/tenant_id}/*"

  # Statement 1: PutObject/GetObject
  #
  #  Resource: !Sub "${SharedStorageBucket.Arn}/${!aws:PrincipalTag/tenant_id}/*"
  #  - Actions: s3:PutObject, s3:GetObject
  #  - Resource-level permission: These actions operate on individual objects
  #  - No condition needed: The resource ARN itself contains the restriction
  #  - Example: If tenant_id=tenant-a, this becomes arn:aws:s3:::bucket/tenant-a/*
  #  - Result: Can only read/write objects under your tenant's prefix
  #
  #  Statement 2: ListBucket
  #
  #  Resource: !GetAtt SharedStorageBucket.Arn
  #  Condition:
  #    StringLike:
  #      s3:prefix: "${aws:PrincipalTag/tenant_id}/*"
  #  - Action: s3:ListBucket
  #  - Bucket-level permission: This action operates on the entire bucket
  #  - Condition required: Since the resource is the whole bucket, we use a condition
  #  - Purpose: When listing, only show files under your tenant's prefix
  #  - Without condition: Would see ALL files in the bucket!
  #
  #  Why Two Approaches?
  #
  #  1. Object operations (Put/Get) can use the resource ARN to restrict access
  #  2. Bucket operations (List) must use conditions because they operate on the bucket itself
  #
  #  Think of it like a building:
  #  - PutObject/GetObject = "You can only enter room 5A" (specific resource)
  #  - ListBucket = "You can look at the directory, but only see rooms starting with 5" (condition on broader resource)
  #
  #  This ensures tenants can only see and access their own data, even when performing different types of S3 operations.

  # ================================================
  # IAM ROLE FOR MAIN LAMBDA FUNCTION
  # ================================================
  # This role provides a single execution context with permissions
  # to access our tenant buckets using a prefix-based policy
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Explicit name is required to break circular dependency with TenantAccessRole
      RoleName: !Sub "${AWS::StackName}-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # Basic Lambda execution permissions (CloudWatch Logs)
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # Allow Lambda to assume the tenant access role
        - PolicyName: AssumeRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - sts:AssumeRole
                  - sts:TagSession
                Resource: !GetAtt TenantAccessRole.Arn

  # ================================================
  # MAIN LAMBDA FUNCTION - File Upload API
  # ================================================
  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-upload-function"
      CodeUri: .aws-sam/build/UploadFunction/function.zip
      Handler: bootstrap
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Configuration passed to Lambda as environment variables
          SHARED_BUCKET: !Ref SharedStorageBucket
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          LOG_LEVEL: INFO
          TENANT_ACCESS_ROLE_ARN: !GetAtt TenantAccessRole.Arn
      Events:
        # API Gateway integration for upload endpoint (requires authentication)
        Upload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload
            Method: POST
            Auth:
              Authorizer: TenantVerificationAuthorizer
              
        # Multipart upload endpoints (require authentication)
        UploadInitiate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload/initiate
            Method: POST
            Auth:
              Authorizer: TenantVerificationAuthorizer
              
        UploadComplete:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload/complete
            Method: POST
            Auth:
              Authorizer: TenantVerificationAuthorizer
              
        UploadAbort:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload/abort
            Method: POST
            Auth:
              Authorizer: TenantVerificationAuthorizer
              
        UploadRefresh:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload/refresh
            Method: POST
            Auth:
              Authorizer: TenantVerificationAuthorizer
              
        # Health check endpoint (no authentication required)
        Health:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health
            Method: GET

  # ================================================
  # LOGIN LAMBDA FUNCTION - Authentication Service
  # ================================================
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-login"
      CodeUri: .aws-sam/build/LoginFunction/function.zip
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          LOG_LEVEL: INFO
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
                - cognito-idp:RespondToAuthChallenge
              Resource: !GetAtt UserPool.Arn
      Events:
        # Login endpoint (no authentication required)
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /login
            Method: POST

  # ================================================
  # TENANT AUTHORIZER LAMBDA - Custom JWT Claims Validation
  # ================================================
  # This Lambda verifies tenant_id claim presence after Cognito validation
  TenantAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-tenant-authorizer"
      CodeUri: .aws-sam/build/TenantAuthorizerFunction/function.zip
      Handler: bootstrap
      Runtime: provided.al2023
      Environment:
        Variables:
          LOG_LEVEL: INFO
          COGNITO_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          COGNITO_REGION: !Ref AWS::Region
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'execute-api:Invoke'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*'

  # ================================================
  # API GATEWAY CLOUDWATCH LOGS ROLE
  # ================================================
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  # ================================================
  # API GATEWAY - HTTP API Endpoint
  # ================================================
  ApiGateway:
    Type: AWS::Serverless::Api
    DependsOn: ApiGatewayAccount
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      StageName: prod
      # Enable API Gateway execution logging
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      # Authorization configuration  
      Auth:
        Authorizers:
          # Lambda authorizer for Cognito JWT validation + tenant verification
          TenantVerificationAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt TenantAuthorizerFunction.Arn
            AuthorizerResultTtlInSeconds: 0
            Identity:
              Headers:
                - Authorization
      # CORS configuration for web clients
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      # Custom domain configuration
      Domain:
        DomainName: !Sub "${ApiSubdomain}.${DomainName}"
        CertificateArn: !Ref ApiCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
        # BasePath defaults to "/" which maps to the StageName ("prod")
        # This means: https://upload-api.stefando.me/upload → https://{api-id}.execute-api.{region}.amazonaws.com/prod/upload

  # ================================================
  # SSL CERTIFICATE - HTTPS Security
  # ================================================
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${ApiSubdomain}.${DomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "${ApiSubdomain}.${DomainName}"
          HostedZoneId: !Ref HostedZoneId

  # No need to define HostedZone resource as we're using the HostedZoneId parameter

# ================================================
# OUTPUTS - Information for other systems/testing
# ================================================
Outputs:
  ApiUrl:
    Description: Custom domain API endpoint URL
    Value: !Sub "https://${ApiSubdomain}.${DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-id"

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-client-id"

  SharedStorageBucket:
    Description: Shared S3 bucket for all tenants
    Value: !Ref SharedStorageBucket
    Export:
      Name: !Sub "${AWS::StackName}-shared-bucket"